// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file performance.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: PBUser, rhs: PBUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGroup == rhs.hasGroup) && (!lhs.hasGroup || lhs.group == rhs.group)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: PBGroup, rhs: PBGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOwner == rhs.hasOwner) && (!lhs.hasOwner || lhs.owner == rhs.owner)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: PBPerfomanceBatch, rhs: PBPerfomanceBatch) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.batch == rhs.batch)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: PBPerfomance, rhs: PBPerfomance) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInts == rhs.hasInts) && (!lhs.hasInts || lhs.ints == rhs.ints)
  fieldCheck = fieldCheck && (lhs.hasInts64 == rhs.hasInts64) && (!lhs.hasInts64 || lhs.ints64 == rhs.ints64)
  fieldCheck = fieldCheck && (lhs.hasDoubles == rhs.hasDoubles) && (!lhs.hasDoubles || lhs.doubles == rhs.doubles)
  fieldCheck = fieldCheck && (lhs.hasFloats == rhs.hasFloats) && (!lhs.hasFloats || lhs.floats == rhs.floats)
  fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
  fieldCheck = fieldCheck && (lhs.hasBytes == rhs.hasBytes) && (!lhs.hasBytes || lhs.bytes == rhs.bytes)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: PBProtoPoint, rhs: PBProtoPoint) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: PBIceCreamCone, rhs: PBIceCreamCone) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasScoops == rhs.hasScoops) && (!lhs.hasScoops || lhs.scoops == rhs.scoops)
  fieldCheck = fieldCheck && (lhs.hasFlavor == rhs.hasFlavor) && (!lhs.hasFlavor || lhs.flavor == rhs.flavor)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal struct PerformanceRoot {
  internal static var sharedInstance : PerformanceRoot {
   struct Static {
       static let instance : PerformanceRoot = PerformanceRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(registry: extensionRegistry)
    Google.Protobuf.SwiftDescriptorRoot.sharedInstance.registerAllExtensions(registry: extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class PBUser : GeneratedMessage {
  internal fileprivate(set) var group:PBGroup!
  internal fileprivate(set) var hasGroup:Bool = false
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeTo(codedOutputStream:CodedOutputStream) throws {
    if hasGroup {
      try codedOutputStream.writeMessage(fieldNumber:1, value:group)
    }
    try unknownFields.writeTo(codedOutputStream:codedOutputStream)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasGroup {
        if let varSizegroup = group?.computeMessageSize(fieldNumber: 1) {
            serialize_size += varSizegroup
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func getBuilder() -> PBUser.Builder {
    return PBUser.classBuilder() as! PBUser.Builder
  }
  internal func getBuilder() -> PBUser.Builder {
    return classBuilder() as! PBUser.Builder
  }
  internal override class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBUser.Builder()
  }
  internal override func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBUser.Builder()
  }
  internal func toBuilder() throws -> PBUser.Builder {
    return try PBUser.builderWithPrototype(prototype: self)
  }
  internal class func builderWithPrototype(prototype:PBUser) throws -> PBUser.Builder {
    return try PBUser.Builder().mergeFrom(other: prototype)
  }
  override internal func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasGroup {
      output += "\(indent) group {\n"
      if let outDescGroup = group {
        output += try outDescGroup.getDescription(indent:"\(indent)  ")
      }
      output += "\(indent) }\n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasGroup {
              if let hashValuegroup = group?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuegroup
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "PBUser"
  }
  override internal func className() -> String {
      return "PBUser"
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:PBUser = PBUser()
    internal func getMessage() -> PBUser {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    internal var hasGroup:Bool {
         get {
             return builderResult.hasGroup
         }
    }
    internal var group:PBGroup! {
         get {
             if groupBuilder_ != nil {
                builderResult.group = groupBuilder_.getMessage()
             }
             return builderResult.group
         }
         set (value) {
             builderResult.hasGroup = true
             builderResult.group = value
         }
    }
    private var groupBuilder_:PBGroup.Builder! {
         didSet {
            builderResult.hasGroup = true
         }
    }
    internal func getGroupBuilder() -> PBGroup.Builder {
      if groupBuilder_ == nil {
         groupBuilder_ = PBGroup.Builder()
         builderResult.group = groupBuilder_.getMessage()
         if group != nil {
            _ = try! groupBuilder_.mergeFrom(other: group)
         }
      }
      return groupBuilder_
    }
    internal func setGroup(_ value:PBGroup!) -> PBUser.Builder {
      self.group = value
      return self
    }
    internal func mergeGroup(value:PBGroup) throws -> PBUser.Builder {
      if builderResult.hasGroup {
        builderResult.group = try PBGroup.builderWithPrototype(prototype: builderResult.group).mergeFrom(other: value).buildPartial()
      } else {
        builderResult.group = value
      }
      builderResult.hasGroup = true
      return self
    }
    internal func clearGroup() -> PBUser.Builder {
      groupBuilder_ = nil
      builderResult.hasGroup = false
      builderResult.group = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> PBUser.Builder {
      builderResult = PBUser()
      return self
    }
    internal override func clone() throws -> PBUser.Builder {
      return try PBUser.builderWithPrototype(prototype: builderResult)
    }
    internal override func build() throws -> PBUser {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> PBUser {
      let returnMe:PBUser = builderResult
      return returnMe
    }
    internal func mergeFrom(other:PBUser) throws -> PBUser.Builder {
      if other == PBUser() {
       return self
      }
      if other.hasGroup {
          _ = try mergeGroup(value: other.group)
      }
      _ = try merge(unknownField: other.unknownFields)
      return self
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream) throws -> PBUser.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBUser.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom: self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          let subBuilder:PBGroup.Builder = PBGroup.Builder()
          if hasGroup {
           _ = try subBuilder.mergeFrom(other: group)
          }
          try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
          group = subBuilder.buildPartial()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class PBGroup : GeneratedMessage {
  internal fileprivate(set) var owner:PBUser!
  internal fileprivate(set) var hasOwner:Bool = false
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeTo(codedOutputStream:CodedOutputStream) throws {
    if hasOwner {
      try codedOutputStream.writeMessage(fieldNumber:1, value:owner)
    }
    try unknownFields.writeTo(codedOutputStream:codedOutputStream)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasOwner {
        if let varSizeowner = owner?.computeMessageSize(fieldNumber: 1) {
            serialize_size += varSizeowner
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func getBuilder() -> PBGroup.Builder {
    return PBGroup.classBuilder() as! PBGroup.Builder
  }
  internal func getBuilder() -> PBGroup.Builder {
    return classBuilder() as! PBGroup.Builder
  }
  internal override class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBGroup.Builder()
  }
  internal override func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBGroup.Builder()
  }
  internal func toBuilder() throws -> PBGroup.Builder {
    return try PBGroup.builderWithPrototype(prototype: self)
  }
  internal class func builderWithPrototype(prototype:PBGroup) throws -> PBGroup.Builder {
    return try PBGroup.Builder().mergeFrom(other: prototype)
  }
  override internal func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasOwner {
      output += "\(indent) owner {\n"
      if let outDescOwner = owner {
        output += try outDescOwner.getDescription(indent:"\(indent)  ")
      }
      output += "\(indent) }\n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOwner {
              if let hashValueowner = owner?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueowner
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "PBGroup"
  }
  override internal func className() -> String {
      return "PBGroup"
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:PBGroup = PBGroup()
    internal func getMessage() -> PBGroup {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    internal var hasOwner:Bool {
         get {
             return builderResult.hasOwner
         }
    }
    internal var owner:PBUser! {
         get {
             if ownerBuilder_ != nil {
                builderResult.owner = ownerBuilder_.getMessage()
             }
             return builderResult.owner
         }
         set (value) {
             builderResult.hasOwner = true
             builderResult.owner = value
         }
    }
    private var ownerBuilder_:PBUser.Builder! {
         didSet {
            builderResult.hasOwner = true
         }
    }
    internal func getOwnerBuilder() -> PBUser.Builder {
      if ownerBuilder_ == nil {
         ownerBuilder_ = PBUser.Builder()
         builderResult.owner = ownerBuilder_.getMessage()
         if owner != nil {
            _ = try! ownerBuilder_.mergeFrom(other: owner)
         }
      }
      return ownerBuilder_
    }
    internal func setOwner(_ value:PBUser!) -> PBGroup.Builder {
      self.owner = value
      return self
    }
    internal func mergeOwner(value:PBUser) throws -> PBGroup.Builder {
      if builderResult.hasOwner {
        builderResult.owner = try PBUser.builderWithPrototype(prototype: builderResult.owner).mergeFrom(other: value).buildPartial()
      } else {
        builderResult.owner = value
      }
      builderResult.hasOwner = true
      return self
    }
    internal func clearOwner() -> PBGroup.Builder {
      ownerBuilder_ = nil
      builderResult.hasOwner = false
      builderResult.owner = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> PBGroup.Builder {
      builderResult = PBGroup()
      return self
    }
    internal override func clone() throws -> PBGroup.Builder {
      return try PBGroup.builderWithPrototype(prototype: builderResult)
    }
    internal override func build() throws -> PBGroup {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> PBGroup {
      let returnMe:PBGroup = builderResult
      return returnMe
    }
    internal func mergeFrom(other:PBGroup) throws -> PBGroup.Builder {
      if other == PBGroup() {
       return self
      }
      if other.hasOwner {
          _ = try mergeOwner(value: other.owner)
      }
      _ = try merge(unknownField: other.unknownFields)
      return self
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream) throws -> PBGroup.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBGroup.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom: self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          let subBuilder:PBUser.Builder = PBUser.Builder()
          if hasOwner {
           _ = try subBuilder.mergeFrom(other: owner)
          }
          try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
          owner = subBuilder.buildPartial()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class PBPerfomanceBatch : GeneratedMessage {
  internal fileprivate(set) var batch:Array<PBPerfomance> = Array<PBPerfomance>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    var isInitbatch:Bool = true
    for oneElementbatch in batch {
        if (!oneElementbatch.isInitialized()) {
            isInitbatch = false
            break 
        }
    }
    if !isInitbatch {
     return isInitbatch
     }
   return true
  }
  override internal func writeTo(codedOutputStream:CodedOutputStream) throws {
    for oneElementbatch in batch {
        try codedOutputStream.writeMessage(fieldNumber:1, value:oneElementbatch)
    }
    try unknownFields.writeTo(codedOutputStream:codedOutputStream)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    for oneElementbatch in batch {
        serialize_size += oneElementbatch.computeMessageSize(fieldNumber: 1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func getBuilder() -> PBPerfomanceBatch.Builder {
    return PBPerfomanceBatch.classBuilder() as! PBPerfomanceBatch.Builder
  }
  internal func getBuilder() -> PBPerfomanceBatch.Builder {
    return classBuilder() as! PBPerfomanceBatch.Builder
  }
  internal override class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBPerfomanceBatch.Builder()
  }
  internal override func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBPerfomanceBatch.Builder()
  }
  internal func toBuilder() throws -> PBPerfomanceBatch.Builder {
    return try PBPerfomanceBatch.builderWithPrototype(prototype: self)
  }
  internal class func builderWithPrototype(prototype:PBPerfomanceBatch) throws -> PBPerfomanceBatch.Builder {
    return try PBPerfomanceBatch.Builder().mergeFrom(other: prototype)
  }
  override internal func getDescription(indent:String) throws -> String {
    var output:String = ""
    var batchElementIndex:Int = 0
    for oneElementbatch in batch {
        output += "\(indent) batch[\(batchElementIndex)] {\n"
        output += try oneElementbatch.getDescription(indent:"\(indent)  ")
        output += "\(indent)}\n"
        batchElementIndex += 1
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementbatch in batch {
              hashCode = (hashCode &* 31) &+ oneElementbatch.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "PBPerfomanceBatch"
  }
  override internal func className() -> String {
      return "PBPerfomanceBatch"
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:PBPerfomanceBatch = PBPerfomanceBatch()
    internal func getMessage() -> PBPerfomanceBatch {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    internal var batch:Array<PBPerfomance> {
         get {
             return builderResult.batch
         }
         set (value) {
             builderResult.batch = value
         }
    }
    internal func setBatch(_ value:Array<PBPerfomance>) -> PBPerfomanceBatch.Builder {
      self.batch = value
      return self
    }
    internal func clearBatch() -> PBPerfomanceBatch.Builder {
      builderResult.batch.removeAll(keepingCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> PBPerfomanceBatch.Builder {
      builderResult = PBPerfomanceBatch()
      return self
    }
    internal override func clone() throws -> PBPerfomanceBatch.Builder {
      return try PBPerfomanceBatch.builderWithPrototype(prototype: builderResult)
    }
    internal override func build() throws -> PBPerfomanceBatch {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> PBPerfomanceBatch {
      let returnMe:PBPerfomanceBatch = builderResult
      return returnMe
    }
    internal func mergeFrom(other:PBPerfomanceBatch) throws -> PBPerfomanceBatch.Builder {
      if other == PBPerfomanceBatch() {
       return self
      }
      if !other.batch.isEmpty  {
         builderResult.batch += other.batch
      }
      _ = try merge(unknownField: other.unknownFields)
      return self
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream) throws -> PBPerfomanceBatch.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBPerfomanceBatch.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom: self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          let subBuilder = PBPerfomance.Builder()
          try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
          batch.append(subBuilder.buildPartial())

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class PBPerfomance : GeneratedMessage {
  internal fileprivate(set) var ints:Int32 = Int32(0)

  internal fileprivate(set) var hasInts:Bool = false
  internal fileprivate(set) var ints64:Int64 = Int64(0)

  internal fileprivate(set) var hasInts64:Bool = false
  internal fileprivate(set) var doubles:Double = Double(0)

  internal fileprivate(set) var hasDoubles:Bool = false
  internal fileprivate(set) var floats:Float = Float(0)

  internal fileprivate(set) var hasFloats:Bool = false
  internal fileprivate(set) var str:String = ""

  internal fileprivate(set) var hasStr:Bool = false
  internal fileprivate(set) var bytes:Data = Data()

  internal fileprivate(set) var hasBytes:Bool = false
  internal fileprivate(set) var description_:String = ""

  internal fileprivate(set) var hasDescription:Bool = false
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasInts {
      return false
    }
    if !hasInts64 {
      return false
    }
    if !hasDoubles {
      return false
    }
    if !hasFloats {
      return false
    }
   return true
  }
  override internal func writeTo(codedOutputStream:CodedOutputStream) throws {
    if hasInts {
      try codedOutputStream.writeInt32(fieldNumber:1, value:ints)
    }
    if hasInts64 {
      try codedOutputStream.writeInt64(fieldNumber:2, value:ints64)
    }
    if hasDoubles {
      try codedOutputStream.writeDouble(fieldNumber:3, value:doubles)
    }
    if hasFloats {
      try codedOutputStream.writeFloat(fieldNumber:4, value:floats)
    }
    if hasStr {
      try codedOutputStream.writeString(fieldNumber:5, value:str)
    }
    if hasBytes {
      try codedOutputStream.writeData(fieldNumber:6, value:bytes)
    }
    if hasDescription {
      try codedOutputStream.writeString(fieldNumber:7, value:description_)
    }
    try unknownFields.writeTo(codedOutputStream:codedOutputStream)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasInts {
      serialize_size += ints.computeInt32Size(fieldNumber: 1)
    }
    if hasInts64 {
      serialize_size += ints64.computeInt64Size(fieldNumber: 2)
    }
    if hasDoubles {
      serialize_size += doubles.computeDoubleSize(fieldNumber: 3)
    }
    if hasFloats {
      serialize_size += floats.computeFloatSize(fieldNumber: 4)
    }
    if hasStr {
      serialize_size += str.computeStringSize(fieldNumber: 5)
    }
    if hasBytes {
      serialize_size += bytes.computeDataSize(fieldNumber: 6)
    }
    if hasDescription {
      serialize_size += description_.computeStringSize(fieldNumber: 7)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func getBuilder() -> PBPerfomance.Builder {
    return PBPerfomance.classBuilder() as! PBPerfomance.Builder
  }
  internal func getBuilder() -> PBPerfomance.Builder {
    return classBuilder() as! PBPerfomance.Builder
  }
  internal override class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBPerfomance.Builder()
  }
  internal override func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBPerfomance.Builder()
  }
  internal func toBuilder() throws -> PBPerfomance.Builder {
    return try PBPerfomance.builderWithPrototype(prototype: self)
  }
  internal class func builderWithPrototype(prototype:PBPerfomance) throws -> PBPerfomance.Builder {
    return try PBPerfomance.Builder().mergeFrom(other: prototype)
  }
  override internal func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasInts {
      output += "\(indent) ints: \(ints) \n"
    }
    if hasInts64 {
      output += "\(indent) ints64: \(ints64) \n"
    }
    if hasDoubles {
      output += "\(indent) doubles: \(doubles) \n"
    }
    if hasFloats {
      output += "\(indent) floats: \(floats) \n"
    }
    if hasStr {
      output += "\(indent) str: \(str) \n"
    }
    if hasBytes {
      output += "\(indent) bytes: \(bytes) \n"
    }
    if hasDescription {
      output += "\(indent) description: \(description_) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasInts {
             hashCode = (hashCode &* 31) &+ ints.hashValue
          }
          if hasInts64 {
             hashCode = (hashCode &* 31) &+ ints64.hashValue
          }
          if hasDoubles {
             hashCode = (hashCode &* 31) &+ doubles.hashValue
          }
          if hasFloats {
             hashCode = (hashCode &* 31) &+ floats.hashValue
          }
          if hasStr {
             hashCode = (hashCode &* 31) &+ str.hashValue
          }
          if hasBytes {
             hashCode = (hashCode &* 31) &+ bytes.hashValue
          }
          if hasDescription {
             hashCode = (hashCode &* 31) &+ description_.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "PBPerfomance"
  }
  override internal func className() -> String {
      return "PBPerfomance"
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:PBPerfomance = PBPerfomance()
    internal func getMessage() -> PBPerfomance {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    internal var hasInts:Bool {
         get {
              return builderResult.hasInts
         }
    }
    internal var ints:Int32 {
         get {
              return builderResult.ints
         }
         set (value) {
             builderResult.hasInts = true
             builderResult.ints = value
         }
    }
    internal func setInts(_ value:Int32) -> PBPerfomance.Builder {
      self.ints = value
      return self
    }
    internal func clearInts() -> PBPerfomance.Builder{
         builderResult.hasInts = false
         builderResult.ints = Int32(0)
         return self
    }
    internal var hasInts64:Bool {
         get {
              return builderResult.hasInts64
         }
    }
    internal var ints64:Int64 {
         get {
              return builderResult.ints64
         }
         set (value) {
             builderResult.hasInts64 = true
             builderResult.ints64 = value
         }
    }
    internal func setInts64(_ value:Int64) -> PBPerfomance.Builder {
      self.ints64 = value
      return self
    }
    internal func clearInts64() -> PBPerfomance.Builder{
         builderResult.hasInts64 = false
         builderResult.ints64 = Int64(0)
         return self
    }
    internal var hasDoubles:Bool {
         get {
              return builderResult.hasDoubles
         }
    }
    internal var doubles:Double {
         get {
              return builderResult.doubles
         }
         set (value) {
             builderResult.hasDoubles = true
             builderResult.doubles = value
         }
    }
    internal func setDoubles(_ value:Double) -> PBPerfomance.Builder {
      self.doubles = value
      return self
    }
    internal func clearDoubles() -> PBPerfomance.Builder{
         builderResult.hasDoubles = false
         builderResult.doubles = Double(0)
         return self
    }
    internal var hasFloats:Bool {
         get {
              return builderResult.hasFloats
         }
    }
    internal var floats:Float {
         get {
              return builderResult.floats
         }
         set (value) {
             builderResult.hasFloats = true
             builderResult.floats = value
         }
    }
    internal func setFloats(_ value:Float) -> PBPerfomance.Builder {
      self.floats = value
      return self
    }
    internal func clearFloats() -> PBPerfomance.Builder{
         builderResult.hasFloats = false
         builderResult.floats = Float(0)
         return self
    }
    internal var hasStr:Bool {
         get {
              return builderResult.hasStr
         }
    }
    internal var str:String {
         get {
              return builderResult.str
         }
         set (value) {
             builderResult.hasStr = true
             builderResult.str = value
         }
    }
    internal func setStr(_ value:String) -> PBPerfomance.Builder {
      self.str = value
      return self
    }
    internal func clearStr() -> PBPerfomance.Builder{
         builderResult.hasStr = false
         builderResult.str = ""
         return self
    }
    internal var hasBytes:Bool {
         get {
              return builderResult.hasBytes
         }
    }
    internal var bytes:Data {
         get {
              return builderResult.bytes
         }
         set (value) {
             builderResult.hasBytes = true
             builderResult.bytes = value
         }
    }
    internal func setBytes(_ value:Data) -> PBPerfomance.Builder {
      self.bytes = value
      return self
    }
    internal func clearBytes() -> PBPerfomance.Builder{
         builderResult.hasBytes = false
         builderResult.bytes = Data()
         return self
    }
    internal var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    internal var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    internal func setDescription(_ value:String) -> PBPerfomance.Builder {
      self.description_ = value
      return self
    }
    internal func clearDescription() -> PBPerfomance.Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> PBPerfomance.Builder {
      builderResult = PBPerfomance()
      return self
    }
    internal override func clone() throws -> PBPerfomance.Builder {
      return try PBPerfomance.builderWithPrototype(prototype: builderResult)
    }
    internal override func build() throws -> PBPerfomance {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> PBPerfomance {
      let returnMe:PBPerfomance = builderResult
      return returnMe
    }
    internal func mergeFrom(other:PBPerfomance) throws -> PBPerfomance.Builder {
      if other == PBPerfomance() {
       return self
      }
      if other.hasInts {
           ints = other.ints
      }
      if other.hasInts64 {
           ints64 = other.ints64
      }
      if other.hasDoubles {
           doubles = other.doubles
      }
      if other.hasFloats {
           floats = other.floats
      }
      if other.hasStr {
           str = other.str
      }
      if other.hasBytes {
           bytes = other.bytes
      }
      if other.hasDescription {
           description_ = other.description_
      }
      _ = try merge(unknownField: other.unknownFields)
      return self
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream) throws -> PBPerfomance.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBPerfomance.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom: self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8:
          ints = try codedInputStream.readInt32()

        case 16:
          ints64 = try codedInputStream.readInt64()

        case 25:
          doubles = try codedInputStream.readDouble()

        case 37:
          floats = try codedInputStream.readFloat()

        case 42:
          str = try codedInputStream.readString()

        case 50:
          bytes = try codedInputStream.readData()

        case 58:
          description_ = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class PBProtoPoint : GeneratedMessage {
  internal fileprivate(set) var latitude:Float = Float(0)

  internal fileprivate(set) var hasLatitude:Bool = false
  internal fileprivate(set) var longitude:Float = Float(0)

  internal fileprivate(set) var hasLongitude:Bool = false
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasLatitude {
      return false
    }
    if !hasLongitude {
      return false
    }
   return true
  }
  override internal func writeTo(codedOutputStream:CodedOutputStream) throws {
    if hasLatitude {
      try codedOutputStream.writeFloat(fieldNumber:1, value:latitude)
    }
    if hasLongitude {
      try codedOutputStream.writeFloat(fieldNumber:2, value:longitude)
    }
    try unknownFields.writeTo(codedOutputStream:codedOutputStream)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasLatitude {
      serialize_size += latitude.computeFloatSize(fieldNumber: 1)
    }
    if hasLongitude {
      serialize_size += longitude.computeFloatSize(fieldNumber: 2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func getBuilder() -> PBProtoPoint.Builder {
    return PBProtoPoint.classBuilder() as! PBProtoPoint.Builder
  }
  internal func getBuilder() -> PBProtoPoint.Builder {
    return classBuilder() as! PBProtoPoint.Builder
  }
  internal override class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBProtoPoint.Builder()
  }
  internal override func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBProtoPoint.Builder()
  }
  internal func toBuilder() throws -> PBProtoPoint.Builder {
    return try PBProtoPoint.builderWithPrototype(prototype: self)
  }
  internal class func builderWithPrototype(prototype:PBProtoPoint) throws -> PBProtoPoint.Builder {
    return try PBProtoPoint.Builder().mergeFrom(other: prototype)
  }
  override internal func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "PBProtoPoint"
  }
  override internal func className() -> String {
      return "PBProtoPoint"
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:PBProtoPoint = PBProtoPoint()
    internal func getMessage() -> PBProtoPoint {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    internal var hasLatitude:Bool {
         get {
              return builderResult.hasLatitude
         }
    }
    internal var latitude:Float {
         get {
              return builderResult.latitude
         }
         set (value) {
             builderResult.hasLatitude = true
             builderResult.latitude = value
         }
    }
    internal func setLatitude(_ value:Float) -> PBProtoPoint.Builder {
      self.latitude = value
      return self
    }
    internal func clearLatitude() -> PBProtoPoint.Builder{
         builderResult.hasLatitude = false
         builderResult.latitude = Float(0)
         return self
    }
    internal var hasLongitude:Bool {
         get {
              return builderResult.hasLongitude
         }
    }
    internal var longitude:Float {
         get {
              return builderResult.longitude
         }
         set (value) {
             builderResult.hasLongitude = true
             builderResult.longitude = value
         }
    }
    internal func setLongitude(_ value:Float) -> PBProtoPoint.Builder {
      self.longitude = value
      return self
    }
    internal func clearLongitude() -> PBProtoPoint.Builder{
         builderResult.hasLongitude = false
         builderResult.longitude = Float(0)
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> PBProtoPoint.Builder {
      builderResult = PBProtoPoint()
      return self
    }
    internal override func clone() throws -> PBProtoPoint.Builder {
      return try PBProtoPoint.builderWithPrototype(prototype: builderResult)
    }
    internal override func build() throws -> PBProtoPoint {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> PBProtoPoint {
      let returnMe:PBProtoPoint = builderResult
      return returnMe
    }
    internal func mergeFrom(other:PBProtoPoint) throws -> PBProtoPoint.Builder {
      if other == PBProtoPoint() {
       return self
      }
      if other.hasLatitude {
           latitude = other.latitude
      }
      if other.hasLongitude {
           longitude = other.longitude
      }
      _ = try merge(unknownField: other.unknownFields)
      return self
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream) throws -> PBProtoPoint.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBProtoPoint.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom: self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 13:
          latitude = try codedInputStream.readFloat()

        case 21:
          longitude = try codedInputStream.readFloat()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final internal class PBIceCreamCone : GeneratedMessage {


    //Enum type declaration start 

    internal enum PBFlavor:Int32, CustomDebugStringConvertible, CustomStringConvertible {
      case chocolate = 1
      case vanilla = 2

      internal var debugDescription:String { return getDescription() }
      internal var description:String { return getDescription() }
      private func getDescription() -> String { 
        switch self {
        case .chocolate: return ".chocolate"
        case .vanilla: return ".vanilla"
        }
      }
    }

    //Enum type declaration end 

  internal fileprivate(set) var scoops:Int32 = Int32(0)

  internal fileprivate(set) var hasScoops:Bool = false
  internal fileprivate(set) var flavor:PBIceCreamCone.PBFlavor = PBIceCreamCone.PBFlavor.chocolate
  internal fileprivate(set) var hasFlavor:Bool = false
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeTo(codedOutputStream:CodedOutputStream) throws {
    if hasScoops {
      try codedOutputStream.writeInt32(fieldNumber:1, value:scoops)
    }
    if hasFlavor {
      try codedOutputStream.writeEnum(fieldNumber:2, value:flavor.rawValue)
    }
    try unknownFields.writeTo(codedOutputStream:codedOutputStream)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasScoops {
      serialize_size += scoops.computeInt32Size(fieldNumber: 1)
    }
    if (hasFlavor) {
      serialize_size += flavor.rawValue.computeEnumSize(fieldNumber: 2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func getBuilder() -> PBIceCreamCone.Builder {
    return PBIceCreamCone.classBuilder() as! PBIceCreamCone.Builder
  }
  internal func getBuilder() -> PBIceCreamCone.Builder {
    return classBuilder() as! PBIceCreamCone.Builder
  }
  internal override class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBIceCreamCone.Builder()
  }
  internal override func classBuilder() -> ProtocolBuffersMessageBuilder {
    return PBIceCreamCone.Builder()
  }
  internal func toBuilder() throws -> PBIceCreamCone.Builder {
    return try PBIceCreamCone.builderWithPrototype(prototype: self)
  }
  internal class func builderWithPrototype(prototype:PBIceCreamCone) throws -> PBIceCreamCone.Builder {
    return try PBIceCreamCone.Builder().mergeFrom(other: prototype)
  }
  override internal func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasScoops {
      output += "\(indent) scoops: \(scoops) \n"
    }
    if (hasFlavor) {
      output += "\(indent) flavor: \(flavor.description)\n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasScoops {
             hashCode = (hashCode &* 31) &+ scoops.hashValue
          }
          if hasFlavor {
             hashCode = (hashCode &* 31) &+ Int(flavor.rawValue)
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "PBIceCreamCone"
  }
  override internal func className() -> String {
      return "PBIceCreamCone"
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:PBIceCreamCone = PBIceCreamCone()
    internal func getMessage() -> PBIceCreamCone {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    internal var hasScoops:Bool {
         get {
              return builderResult.hasScoops
         }
    }
    internal var scoops:Int32 {
         get {
              return builderResult.scoops
         }
         set (value) {
             builderResult.hasScoops = true
             builderResult.scoops = value
         }
    }
    internal func setScoops(_ value:Int32) -> PBIceCreamCone.Builder {
      self.scoops = value
      return self
    }
    internal func clearScoops() -> PBIceCreamCone.Builder{
         builderResult.hasScoops = false
         builderResult.scoops = Int32(0)
         return self
    }
      internal var hasFlavor:Bool{
          get {
              return builderResult.hasFlavor
          }
      }
      internal var flavor:PBIceCreamCone.PBFlavor {
          get {
              return builderResult.flavor
          }
          set (value) {
              builderResult.hasFlavor = true
              builderResult.flavor = value
          }
      }
      internal func setFlavor(_ value:PBIceCreamCone.PBFlavor) -> PBIceCreamCone.Builder {
        self.flavor = value
        return self
      }
      internal func clearFlavor() -> PBIceCreamCone.Builder {
         builderResult.hasFlavor = false
         builderResult.flavor = .chocolate
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> PBIceCreamCone.Builder {
      builderResult = PBIceCreamCone()
      return self
    }
    internal override func clone() throws -> PBIceCreamCone.Builder {
      return try PBIceCreamCone.builderWithPrototype(prototype: builderResult)
    }
    internal override func build() throws -> PBIceCreamCone {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> PBIceCreamCone {
      let returnMe:PBIceCreamCone = builderResult
      return returnMe
    }
    internal func mergeFrom(other:PBIceCreamCone) throws -> PBIceCreamCone.Builder {
      if other == PBIceCreamCone() {
       return self
      }
      if other.hasScoops {
           scoops = other.scoops
      }
      if other.hasFlavor {
           flavor = other.flavor
      }
      _ = try merge(unknownField: other.unknownFields)
      return self
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream) throws -> PBIceCreamCone.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBIceCreamCone.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom: self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8:
          scoops = try codedInputStream.readInt32()

        case 16:
          let valueIntflavor = try codedInputStream.readEnum()
          if let enumsflavor = PBIceCreamCone.PBFlavor(rawValue:valueIntflavor){
               flavor = enumsflavor
          } else {
               _ = try unknownFieldsBuilder.mergeVarintField(number: 2, value:Int64(valueIntflavor))
          }

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

extension PBUser: GeneratedMessageProtocol {
  internal class func parseArrayDelimitedFrom(inputStream:InputStream) throws -> Array<PBUser> {
    var mergedArray = Array<PBUser>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseDelimitedFrom(inputStream:InputStream) throws -> PBUser? {
    return try PBUser.Builder().mergeDelimitedFrom(inputStream:inputStream)?.build()
  }
  internal class func parseFrom(data:Data) throws -> PBUser {
    return try PBUser.Builder().mergeFrom(data: data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFrom(data:Data, extensionRegistry:ExtensionRegistry) throws -> PBUser {
    return try PBUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(inputStream:InputStream) throws -> PBUser {
    return try PBUser.Builder().mergeFrom(inputStream: inputStream).build()
  }
  internal class func parseFrom(inputStream:InputStream, extensionRegistry:ExtensionRegistry) throws -> PBUser {
    return try PBUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream) throws -> PBUser {
    return try PBUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBUser {
    return try PBUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension PBGroup: GeneratedMessageProtocol {
  internal class func parseArrayDelimitedFrom(inputStream:InputStream) throws -> Array<PBGroup> {
    var mergedArray = Array<PBGroup>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseDelimitedFrom(inputStream:InputStream) throws -> PBGroup? {
    return try PBGroup.Builder().mergeDelimitedFrom(inputStream:inputStream)?.build()
  }
  internal class func parseFrom(data:Data) throws -> PBGroup {
    return try PBGroup.Builder().mergeFrom(data: data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFrom(data:Data, extensionRegistry:ExtensionRegistry) throws -> PBGroup {
    return try PBGroup.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(inputStream:InputStream) throws -> PBGroup {
    return try PBGroup.Builder().mergeFrom(inputStream: inputStream).build()
  }
  internal class func parseFrom(inputStream:InputStream, extensionRegistry:ExtensionRegistry) throws -> PBGroup {
    return try PBGroup.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream) throws -> PBGroup {
    return try PBGroup.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBGroup {
    return try PBGroup.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension PBPerfomanceBatch: GeneratedMessageProtocol {
  internal class func parseArrayDelimitedFrom(inputStream:InputStream) throws -> Array<PBPerfomanceBatch> {
    var mergedArray = Array<PBPerfomanceBatch>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseDelimitedFrom(inputStream:InputStream) throws -> PBPerfomanceBatch? {
    return try PBPerfomanceBatch.Builder().mergeDelimitedFrom(inputStream:inputStream)?.build()
  }
  internal class func parseFrom(data:Data) throws -> PBPerfomanceBatch {
    return try PBPerfomanceBatch.Builder().mergeFrom(data: data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFrom(data:Data, extensionRegistry:ExtensionRegistry) throws -> PBPerfomanceBatch {
    return try PBPerfomanceBatch.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(inputStream:InputStream) throws -> PBPerfomanceBatch {
    return try PBPerfomanceBatch.Builder().mergeFrom(inputStream: inputStream).build()
  }
  internal class func parseFrom(inputStream:InputStream, extensionRegistry:ExtensionRegistry) throws -> PBPerfomanceBatch {
    return try PBPerfomanceBatch.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream) throws -> PBPerfomanceBatch {
    return try PBPerfomanceBatch.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBPerfomanceBatch {
    return try PBPerfomanceBatch.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension PBPerfomance: GeneratedMessageProtocol {
  internal class func parseArrayDelimitedFrom(inputStream:InputStream) throws -> Array<PBPerfomance> {
    var mergedArray = Array<PBPerfomance>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseDelimitedFrom(inputStream:InputStream) throws -> PBPerfomance? {
    return try PBPerfomance.Builder().mergeDelimitedFrom(inputStream:inputStream)?.build()
  }
  internal class func parseFrom(data:Data) throws -> PBPerfomance {
    return try PBPerfomance.Builder().mergeFrom(data: data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFrom(data:Data, extensionRegistry:ExtensionRegistry) throws -> PBPerfomance {
    return try PBPerfomance.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(inputStream:InputStream) throws -> PBPerfomance {
    return try PBPerfomance.Builder().mergeFrom(inputStream: inputStream).build()
  }
  internal class func parseFrom(inputStream:InputStream, extensionRegistry:ExtensionRegistry) throws -> PBPerfomance {
    return try PBPerfomance.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream) throws -> PBPerfomance {
    return try PBPerfomance.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBPerfomance {
    return try PBPerfomance.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension PBProtoPoint: GeneratedMessageProtocol {
  internal class func parseArrayDelimitedFrom(inputStream:InputStream) throws -> Array<PBProtoPoint> {
    var mergedArray = Array<PBProtoPoint>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseDelimitedFrom(inputStream:InputStream) throws -> PBProtoPoint? {
    return try PBProtoPoint.Builder().mergeDelimitedFrom(inputStream:inputStream)?.build()
  }
  internal class func parseFrom(data:Data) throws -> PBProtoPoint {
    return try PBProtoPoint.Builder().mergeFrom(data: data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFrom(data:Data, extensionRegistry:ExtensionRegistry) throws -> PBProtoPoint {
    return try PBProtoPoint.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(inputStream:InputStream) throws -> PBProtoPoint {
    return try PBProtoPoint.Builder().mergeFrom(inputStream: inputStream).build()
  }
  internal class func parseFrom(inputStream:InputStream, extensionRegistry:ExtensionRegistry) throws -> PBProtoPoint {
    return try PBProtoPoint.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream) throws -> PBProtoPoint {
    return try PBProtoPoint.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBProtoPoint {
    return try PBProtoPoint.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension PBIceCreamCone: GeneratedMessageProtocol {
  internal class func parseArrayDelimitedFrom(inputStream:InputStream) throws -> Array<PBIceCreamCone> {
    var mergedArray = Array<PBIceCreamCone>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseDelimitedFrom(inputStream:InputStream) throws -> PBIceCreamCone? {
    return try PBIceCreamCone.Builder().mergeDelimitedFrom(inputStream:inputStream)?.build()
  }
  internal class func parseFrom(data:Data) throws -> PBIceCreamCone {
    return try PBIceCreamCone.Builder().mergeFrom(data: data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFrom(data:Data, extensionRegistry:ExtensionRegistry) throws -> PBIceCreamCone {
    return try PBIceCreamCone.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(inputStream:InputStream) throws -> PBIceCreamCone {
    return try PBIceCreamCone.Builder().mergeFrom(inputStream: inputStream).build()
  }
  internal class func parseFrom(inputStream:InputStream, extensionRegistry:ExtensionRegistry) throws -> PBIceCreamCone {
    return try PBIceCreamCone.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream) throws -> PBIceCreamCone {
    return try PBIceCreamCone.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  internal class func parseFrom(codedInputStream:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> PBIceCreamCone {
    return try PBIceCreamCone.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
